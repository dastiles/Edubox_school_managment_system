// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model School{
  // id String @id @default(uuid())
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  email String? @unique
  phone String?
  address String?
  admins Admin[]

}

model Admin {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  //id        String    @id @default(uuid())
  schoolId String @db.ObjectId
  username  String
  password  String
  email     String    @unique
  location  String?
  about     String?
  phone     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  school School @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  students  Student[]
  teachers  Teacher[]
  departments Department[]
  events Event[]
}

model Student {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
 // id            String    @id @default(uuid())
  parentId      String @db.ObjectId
  adminId       String @db.ObjectId
  first_name          String
  last_name String
  address       String?
  phone_number  String @unique
  password      String?
  email         String    @unique
  date_of_birth DateTime?
  gender        String?
  blood_type  String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
 
  admin         Admin     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  parent        Parent    @relation(fields: [parentId], references: [id], onDelete: Cascade)
}

model Parent {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  //id            String    @id @default(uuid())
  adminId       String
  first_name          String
  last_name String
  email         String    @unique
  phone  String    @unique
  address       String?
  password      String?
  date_of_birth DateTime?
  gender        String?
  employer String?
  company_phone String?
  occupation String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  student Student[]
}

model Teacher {
   id             String    @id @default(auto()) @map("_id") @db.ObjectId
  //id             String    @id @default(uuid())
  adminId        String @db.ObjectId
  staffId String
  name           String
  address        String?
  phone_number   String?
  password       String?
  email          String?   @unique
  date_of_birth  DateTime?
  gender         String?
  bio String?
  hod Boolean @default(false)
  department_name String? 
  departmentId String?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  admin          Admin     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  department Department[]
 staff Staff[]
}

model Department {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  //id           String     @id @default(uuid())
  adminId      String @db.ObjectId
  teacherId String @db.ObjectId
  department_name String
  department_hod String?
  start_date DateTime?
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  admin          Admin     @relation(fields: [adminId], references: [id], onDelete: Cascade)
  department_head Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
  staff Staff[]
  
}

model Staff{
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
 //  id           String     @id @default(uuid())
   adminId String
   departmentId String @db.ObjectId
   teacherId String @db.ObjectId
   name String?
  email String?
  gender String?
  phone String?
  start_date DateTime?
   staff Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
    department_head Department @relation(fields: [departmentId], references: [id], onDelete: Cascade)
}

model Event{
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
 // id String @id @default(uuid())
  adminId String @db.ObjectId
name String
start_date DateTime
end_date DateTime?
event_type String
admin          Admin     @relation(fields: [adminId], references: [id], onDelete: Cascade)
}

// model Course {
// id            String       @id @default(auto()) @map("_id") @db.ObjectId
//   //id            String       @id @default(uuid())
//   name          String
//   code          String
//   grade_level   String
//   credit_hours  Int
//   prerequisites String?
//   Enrollment    Enrollment[]
//   Grade         Grade[]
//   Exam          Exam[]
// }

// model Enrollment {
//   id                String       @id @default(auto()) @map("_id") @db.ObjectId
//   //id                String       @id @default(uuid())
//   student           Student      @relation(fields: [studentId], references: [id], onDelete: Cascade)
//   studentId         String      @db.ObjectId
//   course            Course       @relation(fields: [courseId], references: [id], onDelete: Cascade)
//   courseId          String       @db.ObjectId
//   enrollment_date   DateTime
//   enrollment_status String
//   grade             String?
//   Attendance        Attendance[]
//   Grade             Grade[]
// }

// model Attendance {
//   id                String     @id @default(auto()) @map("_id") @db.ObjectId
//   //id                String     @id @default(uuid())
//   enrollment        Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
//   enrollmentId      String     
//   date              DateTime
//   attendance_status String
//   notes             String?
// }

// model Grade {
//   //id           String     @id @default(auto()) @map("_id") @db.ObjectId
//   id           String     @id @default(uuid())
//   enrollment   Enrollment @relation(fields: [enrollmentId], references: [id], onDelete: Cascade)
//   enrollmentId String   
//   course       Course     @relation(fields: [courseId], references: [id], onDelete: Cascade)
//   courseId     String    
//   grade        String
//   grade_date   DateTime
// }

// model Fee {
//   //id             String   @id @default(auto()) @map("_id") @db.ObjectId
//    id             String   @id @default(uuid())
//   name           String
//   amount         Float
//   due_date       DateTime
//   payment_status String
// }

// model Library {
//  // id               String   @id @default(auto()) @map("_id") @db.ObjectId
//   id               String   @id @default(uuid())
//   title            String
//   author           String
//   isbn             String
//   publisher        String
//   publication_date DateTime
// }

// model Exam {
//   //id          String   @id @default(auto()) @map("_id") @db.ObjectId
//   id          String   @id @default(uuid())
//   course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
//   courseId    String   
//   exam_name   String
//   exam_date   DateTime
//   total_marks Int
// }
